{
  "address": "0xBe0d71BBC6639C7C0FFD939BA33f4cD109f4C0dA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chubbiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "color",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "",
          "type": "bytes3"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eyeColor",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "",
          "type": "bytes3"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mouthLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd45be8841c203e8eb48b620cbbbe9d549a6a0ef04f107461ea5567d98a5c2607",
  "receipt": {
    "to": null,
    "from": "0x7969c5dF549F45b4113EdcEfD954a7273FE35eFE",
    "contractAddress": "0xBe0d71BBC6639C7C0FFD939BA33f4cD109f4C0dA",
    "transactionIndex": 18,
    "gasUsed": "5404513",
    "logsBloom": "0x
    "blockHash": "0xf55431ea1f09c1d37d433abd0581a71a63a7ef245c3f55c2421c9104acc181ee",
    "transactionHash": "0xd45be8841c203e8eb48b620cbbbe9d549a6a0ef04f107461ea5567d98a5c2607",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 6799736,
        "transactionHash": "0xd45be8841c203e8eb48b620cbbbe9d549a6a0ef04f107461ea5567d98a5c2607",
        "address": "0xBe0d71BBC6639C7C0FFD939BA33f4cD109f4C0dA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007969c5df549f45b4113edcefd954a7273fe35efe"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0xf55431ea1f09c1d37d433abd0581a71a63a7ef245c3f55c2421c9104acc181ee"
      }
    ],
    "blockNumber": 6799736,
    "cumulativeGasUsed": "12464801",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "995da0bbd53bc8a535cc4b4b30d82057",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chubbiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"color\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eyeColor\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mouthLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/HexStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary HexStrings {\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xb2de7aac501c89e5f702e806f4c69c3ab8c90e54bdf7ad0c2151a453b84b91e0\",\"license\":\"MIT\"},\"contracts/ToColor.sol\":{\"content\":\"library ToColor {\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n      bytes memory buffer = new bytes(6);\\n      for (uint256 i = 0; i < 3; i++) {\\n          buffer[i*2+1] = ALPHABET[uint8(value[i]) & 0xf];\\n          buffer[i*2] = ALPHABET[uint8(value[i]>>4) & 0xf];\\n      }\\n      return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x6618c2da1b3118d469ccef538d7f2f30d5e1c6b38baebb15e989abef13c5ff7c\"},\"contracts/YourCollectible.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport './HexStrings.sol';\\nimport './ToColor.sol';\\n//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\ncontract YourCollectible is ERC721Enumerable, Ownable {\\n\\n  using Strings for uint256;\\n  using HexStrings for uint160;\\n  using ToColor for bytes3;\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIds;\\n\\n  // all funds go to buidlguidl.eth\\n  address payable public constant recipient =\\n    payable(0xa81a6a910FeD20374361B35C451a4a44F86CeD46);\\n\\n  uint256 public constant limit = 3728;\\n  uint256 public constant curve = 1002; // price increase 0,4% with each purchase\\n  uint256 public price = 0.001 ether;\\n  // the 1154th heterochromic  loogies cost 0.01 ETH, the 2306th cost 0.1ETH, the 3459th cost 1 ETH and the last ones cost 1.7 ETH\\n//heterochromia\\n  mapping (uint256 => bytes3) public color;\\n  mapping (uint256 => bytes3) public eyeColor;\\n  mapping (uint256 => uint256) public chubbiness;\\n  mapping (uint256 => uint256) public mouthLength;\\n\\n  constructor() public ERC721(\\\"Heterochromic Loogies\\\", \\\"OPLOOG\\\") {\\n    // RELEASE THE heterochromic  LOOGIES!\\n  }\\n\\n  function mintItem()\\n      public\\n      payable\\n      returns (uint256)\\n  {\\n      require(_tokenIds.current() < limit, \\\"DONE MINTING\\\");\\n      require(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n      price = (price * curve) / 1000;\\n\\n      _tokenIds.increment();\\n\\n      uint256 id = _tokenIds.current();\\n      _mint(msg.sender, id);\\n\\n      bytes32 predictableRandom = keccak256(abi.encodePacked( id, blockhash(block.number-1), msg.sender, address(this) ));\\n      color[id] = bytes2(predictableRandom[0]) | ( bytes2(predictableRandom[1]) >> 8 ) | ( bytes3(predictableRandom[2]) >> 16 );\\n      bytes32 predictableRandom2 = keccak256(abi.encodePacked(block.timestamp, msg.sender, address(this), id )); \\n      eyeColor[id] = bytes2(predictableRandom2[3]) | ( bytes2(predictableRandom2[1]) >> 8 ) | ( bytes3(predictableRandom2[2]) >> 16 );\\n      chubbiness[id] = 35+((55*uint256(uint8(predictableRandom[3])))/255);\\n      // small chubiness loogies have small mouth\\n      mouthLength[id] = 180+((uint256(chubbiness[id]/4)*uint256(uint8(predictableRandom[4])))/255);\\n\\n      (bool success, ) = recipient.call{value: msg.value}(\\\"\\\");\\n      require(success, \\\"could not send\\\");\\n\\n      return id;\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n      require(_exists(id), \\\"not exist\\\");\\n      string memory name = string(abi.encodePacked('Loogie #',id.toString()));\\n      string memory description = string(abi.encodePacked('This Loogie is the color #',color[id].toColor(),' with a chubbiness of ',uint2str(chubbiness[id]),' and mouth length of ',uint2str(mouthLength[id]),'!!!'));\\n      string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n      return\\n          string(\\n              abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                          abi.encodePacked(\\n                              '{\\\"name\\\":\\\"',\\n                              name,\\n                              '\\\", \\\"description\\\":\\\"',\\n                              description,\\n                              '\\\", \\\"external_url\\\":\\\"https://burnyboys.com/token/',\\n                              id.toString(),\\n                              '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"color\\\", \\\"value\\\": \\\"#',\\n                              color[id].toColor(),\\n                              '\\\"},{\\\"trait_type\\\": \\\"chubbiness\\\", \\\"value\\\": ',\\n                              uint2str(chubbiness[id]),\\n                              '},{\\\"trait_type\\\": \\\"mouthLength\\\", \\\"value\\\": ',\\n                              uint2str(mouthLength[id]),\\n                              '}], \\\"owner\\\":\\\"',\\n                              (uint160(ownerOf(id))).toHexString(20),\\n                              '\\\", \\\"image\\\": \\\"',\\n                              'data:image/svg+xml;base64,',\\n                              image,\\n                              '\\\"}'\\n                          )\\n                        )\\n                    )\\n              )\\n          );\\n  }\\n\\n  function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n\\n    string memory svg = string(abi.encodePacked(\\n      '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n        renderTokenById(id),\\n      '</svg>'\\n    ));\\n\\n    return svg;\\n  }\\n\\n  // Visibility is `public` to enable it being called by other contracts for composition.\\n  function renderTokenById(uint256 id) public view returns (string memory) {\\n    // the translate function for the mouth is based on the curve y = 810/11 - 9x/11\\n    string memory render = string(abi.encodePacked(\\n      '<g id=\\\"eye1\\\">',\\n        '<ellipse stroke-width=\\\"3\\\" ry=\\\"29.5\\\" rx=\\\"29.5\\\" id=\\\"svg_1\\\" cy=\\\"154.5\\\" cx=\\\"181.5\\\" stroke=\\\"#000\\\" fill=\\\"#fff\\\"/>',\\n        '<ellipse ry=\\\"3.5\\\" rx=\\\"2.5\\\" id=\\\"svg_3\\\" cy=\\\"154.5\\\" cx=\\\"173.5\\\" stroke-width=\\\"5\\\" stroke=\\\"#000\\\" fill=\\\"#000000\\\"/>',\\n      '</g>',\\n      '<g id=\\\"head\\\">',\\n        '<ellipse fill=\\\"#',\\n        color[id].toColor(),\\n        '\\\" stroke-width=\\\"3\\\" cx=\\\"204.5\\\" cy=\\\"211.80065\\\" id=\\\"svg_5\\\" rx=\\\"',\\n        chubbiness[id].toString(),\\n        '\\\" ry=\\\"51.80065\\\" stroke=\\\"#000\\\"/>',\\n      '</g>',\\n      '<g id=\\\"eye2\\\">',\\n        '<ellipse stroke-width=\\\"3\\\" ry=\\\"29.5\\\" rx=\\\"29.5\\\" id=\\\"svg_2\\\" cy=\\\"168.5\\\" cx=\\\"209.5\\\" stroke=\\\"#000\\\" fill=\\\"#fff\\\"/>',\\n        '<ellipse ry=\\\"3.5\\\" rx=\\\"3\\\" id=\\\"svg_4\\\" cy=\\\"169.5\\\" cx=\\\"208\\\" stroke-width=\\\"5\\\" fill=\\\"#000000\\\" stroke=\\\"#',\\n        eyeColor[id].toColor(),\\n        '\\\"/>',\\n      '</g>'\\n      '<g class=\\\"mouth\\\" transform=\\\"translate(',uint256((810-9*chubbiness[id])/11).toString(),',0)\\\">',\\n        '<path d=\\\"M 130 240 Q 120 210 ',mouthLength[id].toString(),' 235\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\" fill=\\\"transparent\\\"/>',\\n      '</g>'\\n    ));\\n\\n    return render;\\n  }\\n\\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n      if (_i == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint j = _i;\\n      uint len;\\n      while (j != 0) {\\n          len++;\\n          j /= 10;\\n      }\\n      bytes memory bstr = new bytes(len);\\n      uint k = len;\\n      while (_i != 0) {\\n          k = k-1;\\n          uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n          bytes1 b1 = bytes1(temp);\\n          bstr[k] = b1;\\n          _i /= 10;\\n      }\\n      return string(bstr);\\n  }\\n\\n  function _transfer(address from, address to, uint256 tokenId) internal override(ERC721){\\n    bytes32 predictableRandom = keccak256(abi.encodePacked( tokenId, block.timestamp, to, from ));\\n    eyeColor[tokenId] = bytes2(predictableRandom[0]) | ( bytes2(predictableRandom[1]) >> 8 ) | ( bytes3(predictableRandom[2]) >> 16 );\\n    ERC721._transfer(from, to, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x7b9e6bbac4ff841cca62c0f1467317943be8e13585e576de34cd81c67c16a4a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c68000600c553480156200001c57600080fd5b506040518060400160405280601581526020017f48657465726f6368726f6d6963204c6f6f6769657300000000000000000000008152506040518060400160405280600681526020017f4f504c4f4f4700000000000000000000000000000000000000000000000000008152508160009080519060200190620000a1929190620001b1565b508060019080519060200190620000ba929190620001b1565b505050620000dd620000d1620000e360201b60201c565b620000eb60201b60201c565b620002c6565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001bf9062000261565b90600052602060002090601f016020900481019282620001e357600085556200022f565b82601f10620001fe57805160ff19168380011785556200022f565b828001600101855582156200022f579182015b828111156200022e57825182559160200191906001019062000211565b5b5090506200023e919062000242565b5090565b5b808211156200025d57600081600090555060010162000243565b5090565b600060028204905060018216806200027a57607f821691505b6020821081141562000291576200029062000297565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b615fa280620002d66000396000f3fe6080604052600436106101c25760003560e01c80637165485d116100f7578063a4d66daf11610095578063e985e9c511610064578063e985e9c5146106a2578063eb93406b146106df578063f2fde38b146106fd578063faa204e114610726576101c2565b8063a4d66daf146105d4578063b88d4fde146105ff578063c87b56dd14610628578063d4e28c9c14610665576101c2565b8063969e4b8d116100d1578063969e4b8d14610506578063a035b1fe14610543578063a22cb4651461056e578063a2d6c6da14610597576101c2565b80637165485d146104855780638da5cb5b146104b057806395d89b41146104db576101c2565b80633f4f8561116101645780636352211e1161013e5780636352211e146103c957806366d003ac1461040657806370a0823114610431578063715018a61461046e576101c2565b80633f4f85611461032657806342842e0e146103635780634f6ccce71461038c576101c2565b8063095ea7b3116101a0578063095ea7b31461026c57806318160ddd1461029557806323b872dd146102c05780632f745c59146102e9576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613b35565b610763565b6040516101fb91906148cb565b60405180910390f35b34801561021057600080fd5b506102196107dd565b6040516102269190614901565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190613b87565b61086f565b6040516102639190614849565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190613af9565b6108f4565b005b3480156102a157600080fd5b506102aa610a0c565b6040516102b79190614bc3565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e291906139f3565b610a19565b005b3480156102f557600080fd5b50610310600480360381019061030b9190613af9565b610a79565b60405161031d9190614bc3565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190613b87565b610b1e565b60405161035a9190614bc3565b60405180910390f35b34801561036f57600080fd5b5061038a600480360381019061038591906139f3565b610b36565b005b34801561039857600080fd5b506103b360048036038101906103ae9190613b87565b610b56565b6040516103c09190614bc3565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb9190613b87565b610bed565b6040516103fd9190614849565b60405180910390f35b34801561041257600080fd5b5061041b610c9f565b6040516104289190614864565b60405180910390f35b34801561043d57600080fd5b506104586004803603810190610453919061398e565b610cb7565b6040516104659190614bc3565b60405180910390f35b34801561047a57600080fd5b50610483610d6f565b005b34801561049157600080fd5b5061049a610df7565b6040516104a79190614bc3565b60405180910390f35b3480156104bc57600080fd5b506104c5610dfd565b6040516104d29190614849565b60405180910390f35b3480156104e757600080fd5b506104f0610e27565b6040516104fd9190614901565b60405180910390f35b34801561051257600080fd5b5061052d60048036038101906105289190613b87565b610eb9565b60405161053a91906148e6565b60405180910390f35b34801561054f57600080fd5b50610558610ed9565b6040516105659190614bc3565b60405180910390f35b34801561057a57600080fd5b5061059560048036038101906105909190613abd565b610edf565b005b3480156105a357600080fd5b506105be60048036038101906105b99190613b87565b611060565b6040516105cb9190614901565b60405180910390f35b3480156105e057600080fd5b506105e961119d565b6040516105f69190614bc3565b60405180910390f35b34801561060b57600080fd5b5061062660048036038101906106219190613a42565b6111a3565b005b34801561063457600080fd5b5061064f600480360381019061064a9190613b87565b611205565b60405161065c9190614901565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613b87565b61144c565b60405161069991906148e6565b60405180910390f35b3480156106ae57600080fd5b506106c960048036038101906106c491906139b7565b61146c565b6040516106d691906148cb565b60405180910390f35b6106e7611500565b6040516106f49190614bc3565b60405180910390f35b34801561070957600080fd5b50610724600480360381019061071f919061398e565b611ba0565b005b34801561073257600080fd5b5061074d60048036038101906107489190613b87565b611c98565b60405161075a9190614bc3565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107d657506107d582611cb0565b5b9050919050565b6060600080546107ec90614f03565b80601f016020809104026020016040519081016040528092919081815260200182805461081890614f03565b80156108655780601f1061083a57610100808354040283529160200191610865565b820191906000526020600020905b81548152906001019060200180831161084857829003601f168201915b5050505050905090565b600061087a82611d92565b6108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090614ae3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ff82610bed565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790614b63565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661098f611dfe565b73ffffffffffffffffffffffffffffffffffffffff1614806109be57506109bd816109b8611dfe565b61146c565b5b6109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490614a63565b60405180910390fd5b610a078383611e06565b505050565b6000600880549050905090565b610a2a610a24611dfe565b82611ebf565b610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090614b83565b60405180910390fd5b610a74838383611f9d565b505050565b6000610a8483610cb7565b8210610ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abc90614923565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60106020528060005260406000206000915090505481565b610b51838383604051806020016040528060008152506111a3565b505050565b6000610b60610a0c565b8210610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614ba3565b60405180910390fd5b60088281548110610bdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90614aa3565b60405180910390fd5b80915050919050565b73a81a6a910fed20374361b35c451a4a44f86ced4681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90614a83565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d77611dfe565b73ffffffffffffffffffffffffffffffffffffffff16610d95610dfd565b73ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290614b03565b60405180910390fd5b610df56000612198565b565b6103ea81565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e3690614f03565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6290614f03565b8015610eaf5780601f10610e8457610100808354040283529160200191610eaf565b820191906000526020600020905b815481529060010190602001808311610e9257829003601f168201915b5050505050905090565b600e6020528060005260406000206000915054906101000a900460e81b81565b600c5481565b610ee7611dfe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614a03565b60405180910390fd5b8060056000610f62611dfe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661100f611dfe565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161105491906148cb565b60405180910390a35050565b606060006110ad600d600085815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6110c9600f60008681526020019081526020016000205461255f565b611112600e600087815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b611153600b600f60008981526020019081526020016000205460096111379190614d40565b61032a6111449190614d9a565b61114e9190614d0f565b61255f565b61116f601060008981526020019081526020016000205461255f565b60405160200161118395949392919061456b565b604051602081830303815290604052905080915050919050565b610e9081565b6111b46111ae611dfe565b83611ebf565b6111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90614b83565b60405180910390fd5b6111ff8484848461270c565b50505050565b606061121082611d92565b61124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124690614a43565b60405180910390fd5b600061125a8361255f565b60405160200161126a919061467c565b604051602081830303815290604052905060006112c6600d600086815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6112e2600f600087815260200190815260200160002054612768565b6112fe6010600088815260200190815260200160002054612768565b60405160200161131093929190614702565b6040516020818303038152906040529050600061133461132f8661293d565b612974565b905061142383836113448861255f565b61138d600d60008b815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6113a9600f60008c815260200190815260200160002054612768565b6113c5601060008d815260200190815260200160002054612768565b6113f760146113d38e610bed565b73ffffffffffffffffffffffffffffffffffffffff16612b1390919063ffffffff16565b8860405160200161140f98979695949392919061448b565b604051602081830303815290604052612974565b604051602001611433919061469e565b6040516020818303038152906040529350505050919050565b600d6020528060005260406000206000915054906101000a900460e81b81565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610e9061150f600b612dca565b1061154f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611546906149c3565b60405180910390fd5b600c54341015611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90614b43565b60405180910390fd5b6103e86103ea600c546115a79190614d40565b6115b19190614d0f565b600c819055506115c1600b612dd8565b60006115cd600b612dca565b90506115d93382612dee565b6000816001436115e99190614d9a565b4033306040516020016115ff94939291906147ad565b604051602081830303815290604052805190602001209050601081600260208110611653577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008826001602081106116d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8260006020811061175a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600d600084815260200190815260200160002060006101000a81548162ffffff021916908360e81c02179055506000423330856040516020016117e9949392919061475f565b60405160208183030381529060405280519060200120905060108160026020811061183d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008826001602081106118c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c82600360208110611944577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600e600085815260200190815260200160002060006101000a81548162ffffff021916908360e81c021790555060ff826003602081106119f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c60ff166037611a0c9190614d40565b611a169190614d0f565b6023611a229190614c82565b600f60008581526020019081526020016000208190555060ff82600460208110611a75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c60ff166004600f600087815260200190815260200160002054611a9f9190614d0f565b611aa99190614d40565b611ab39190614d0f565b60b4611abf9190614c82565b6010600085815260200190815260200160002081905550600073a81a6a910fed20374361b35c451a4a44f86ced4673ffffffffffffffffffffffffffffffffffffffff1634604051611b10906146c0565b60006040518083038185875af1925050503d8060008114611b4d576040519150601f19603f3d011682016040523d82523d6000602084013e611b52565b606091505b5050905080611b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8d90614943565b60405180910390fd5b8394505050505090565b611ba8611dfe565b73ffffffffffffffffffffffffffffffffffffffff16611bc6610dfd565b73ffffffffffffffffffffffffffffffffffffffff1614611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390614b03565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390614983565b60405180910390fd5b611c9581612198565b50565b600f6020528060005260406000206000915090505481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611d7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611d8b5750611d8a82612fbc565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e7983610bed565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611eca82611d92565b611f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0090614a23565b60405180910390fd5b6000611f1483610bed565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f8357508373ffffffffffffffffffffffffffffffffffffffff16611f6b8461086f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f945750611f93818561146c565b5b91505092915050565b600081428486604051602001611fb694939291906147fb565b60405160208183030381529060405280519060200120905060108160026020811061200a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60088260016020811061208e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c82600060208110612111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600e600084815260200190815260200160002060006101000a81548162ffffff021916908360e81c0217905550612192848484613026565b50505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606000600667ffffffffffffffff8111156122a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122d55781602001600182028036833780820191505090505b50905060005b6003811015612555577f3031323334353637383961626364656600000000000000000000000000000000600f858360038110612340577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c1660ff1660108110612382577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8260016002846123969190614d40565b6123a09190614c82565b815181106123d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656600000000000000000000000000000000600f6004868460038110612464577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c1660ff16601081106124ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b826002836124dc9190614d40565b81518110612513577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061254d90614f66565b9150506122db565b5080915050919050565b606060008214156125a7576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612707565b600082905060005b600082146125d95780806125c290614f66565b915050600a826125d29190614d0f565b91506125af565b60008167ffffffffffffffff81111561261b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561264d5781602001600182028036833780820191505090505b5090505b60008514612700576001826126669190614d9a565b9150600a856126759190614fe7565b60306126819190614c82565b60f81b8183815181106126bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856126f99190614d0f565b9450612651565b8093505050505b919050565b612717848484611f9d565b61272384848484613282565b612762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275990614963565b60405180910390fd5b50505050565b606060008214156127b0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612938565b600082905060005b600082146127e25780806127cb90614f66565b915050600a826127db9190614d0f565b91506127b8565b60008167ffffffffffffffff811115612824577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128565781602001600182028036833780820191505090505b50905060008290505b60008614612930576001816128749190614d9a565b90506000600a80886128869190614d0f565b6128909190614d40565b8761289b9190614d9a565b60306128a79190614cd8565b905060008160f81b9050808484815181106128eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886129279190614d0f565b9750505061285f565b819450505050505b919050565b6060600061294a83611060565b60405160200161295a91906146d5565b604051602081830303815290604052905080915050919050565b606060008251141561299757604051806020016040528060008152509050612b0e565b6000604051806060016040528060408152602001615f2d60409139905060006003600285516129c69190614c82565b6129d09190614d0f565b60046129dc9190614d40565b905060006020826129ed9190614c82565b67ffffffffffffffff811115612a2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a5e5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612acd576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612a72565b600389510660018114612ae75760028114612af757612b02565b613d3d60f01b6002830352612b02565b603d60f81b60018303525b50505050508093505050505b919050565b606060006002836002612b269190614d40565b612b309190614c82565b67ffffffffffffffff811115612b6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ba15781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612bff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612cc99190614d40565b612cd39190614c82565b90505b6001811115612dbf577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612d78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612db890614ed9565b9050612cd6565b508091505092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5590614ac3565b60405180910390fd5b612e6781611d92565b15612ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9e906149a3565b60405180910390fd5b612eb360008383613419565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f039190614c82565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8273ffffffffffffffffffffffffffffffffffffffff1661304682610bed565b73ffffffffffffffffffffffffffffffffffffffff161461309c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309390614b23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561310c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613103906149e3565b60405180910390fd5b613117838383613419565b613122600082611e06565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131729190614d9a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131c99190614c82565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006132a38473ffffffffffffffffffffffffffffffffffffffff1661352d565b1561340c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026132cc611dfe565b8786866040518563ffffffff1660e01b81526004016132ee949392919061487f565b602060405180830381600087803b15801561330857600080fd5b505af192505050801561333957506040513d601f19601f820116820180604052508101906133369190613b5e565b60015b6133bc573d8060008114613369576040519150601f19603f3d011682016040523d82523d6000602084013e61336e565b606091505b506000815114156133b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ab90614963565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613411565b600190505b949350505050565b613424838383613540565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156134675761346281613545565b6134a6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146134a5576134a4838261358e565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156134e9576134e4816136fb565b613528565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461352757613526828261383e565b5b5b505050565b600080823b905060008111915050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161359b84610cb7565b6135a59190614d9a565b905060006007600084815260200190815260200160002054905081811461368a576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061370f9190614d9a565b9050600060096000848152602001908152602001600020549050600060088381548110613765577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106137ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061384983610cb7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60006138d06138cb84614c03565b614bde565b9050828152602081018484840111156138e857600080fd5b6138f3848285614e97565b509392505050565b60008135905061390a81615ed0565b92915050565b60008135905061391f81615ee7565b92915050565b60008135905061393481615efe565b92915050565b60008151905061394981615efe565b92915050565b600082601f83011261396057600080fd5b81356139708482602086016138bd565b91505092915050565b60008135905061398881615f15565b92915050565b6000602082840312156139a057600080fd5b60006139ae848285016138fb565b91505092915050565b600080604083850312156139ca57600080fd5b60006139d8858286016138fb565b92505060206139e9858286016138fb565b9150509250929050565b600080600060608486031215613a0857600080fd5b6000613a16868287016138fb565b9350506020613a27868287016138fb565b9250506040613a3886828701613979565b9150509250925092565b60008060008060808587031215613a5857600080fd5b6000613a66878288016138fb565b9450506020613a77878288016138fb565b9350506040613a8887828801613979565b925050606085013567ffffffffffffffff811115613aa557600080fd5b613ab18782880161394f565b91505092959194509250565b60008060408385031215613ad057600080fd5b6000613ade858286016138fb565b9250506020613aef85828601613910565b9150509250929050565b60008060408385031215613b0c57600080fd5b6000613b1a858286016138fb565b9250506020613b2b85828601613979565b9150509250929050565b600060208284031215613b4757600080fd5b6000613b5584828501613925565b91505092915050565b600060208284031215613b7057600080fd5b6000613b7e8482850161393a565b91505092915050565b600060208284031215613b9957600080fd5b6000613ba784828501613979565b91505092915050565b613bb981614de0565b82525050565b613bc881614dce565b82525050565b613bdf613bda82614dce565b614faf565b82525050565b613bee81614df2565b82525050565b613c05613c0082614e2a565b614fc1565b82525050565b613c1481614dfe565b82525050565b6000613c2582614c34565b613c2f8185614c4a565b9350613c3f818560208601614ea6565b613c48816150d4565b840191505092915050565b6000613c5e82614c3f565b613c688185614c66565b9350613c78818560208601614ea6565b613c81816150d4565b840191505092915050565b6000613c9782614c3f565b613ca18185614c77565b9350613cb1818560208601614ea6565b80840191505092915050565b6000613cca602a83614c77565b9150613cd5826150f2565b602a82019050919050565b6000613ced601583614c77565b9150613cf882615141565b601582019050919050565b6000613d10600983614c77565b9150613d1b8261516a565b600982019050919050565b6000613d33602b83614c66565b9150613d3e82615193565b604082019050919050565b6000613d56600e83614c66565b9150613d61826151e2565b602082019050919050565b6000613d79603283614c66565b9150613d848261520b565b604082019050919050565b6000613d9c600583614c77565b9150613da78261525a565b600582019050919050565b6000613dbf602683614c66565b9150613dca82615283565b604082019050919050565b6000613de2600d83614c77565b9150613ded826152d2565b600d82019050919050565b6000613e05601c83614c66565b9150613e10826152fb565b602082019050919050565b6000613e28601083614c77565b9150613e3382615324565b601082019050919050565b6000613e4b600c83614c66565b9150613e568261534d565b602082019050919050565b6000613e6e601d83614c77565b9150613e7982615376565b601d82019050919050565b6000613e91602483614c66565b9150613e9c8261539f565b604082019050919050565b6000613eb4601983614c66565b9150613ebf826153ee565b602082019050919050565b6000613ed7603a83614c77565b9150613ee282615417565b603a82019050919050565b6000613efa602c83614c66565b9150613f0582615466565b604082019050919050565b6000613f1d600d83614c77565b9150613f28826154b5565b600d82019050919050565b6000613f40606183614c77565b9150613f4b826154de565b606182019050919050565b6000613f63600983614c66565b9150613f6e82615579565b602082019050919050565b6000613f86600d83614c77565b9150613f91826155a2565b600d82019050919050565b6000613fa9603883614c66565b9150613fb4826155cb565b604082019050919050565b6000613fcc602a83614c66565b9150613fd78261561a565b604082019050919050565b6000613fef602983614c66565b9150613ffa82615669565b604082019050919050565b6000614012600283614c77565b915061401d826156b8565b600282019050919050565b6000614035600883614c77565b9150614040826156e1565b600882019050919050565b6000614058602083614c66565b91506140638261570a565b602082019050919050565b600061407b600d83614c77565b915061408682615733565b600d82019050919050565b600061409e600383614c77565b91506140a98261575c565b600382019050919050565b60006140c1606a83614c77565b91506140cc82615785565b606a82019050919050565b60006140e4602c83614c66565b91506140ef82615820565b604082019050919050565b6000614107602983614c77565b91506141128261586f565b602982019050919050565b600061412a602983614c77565b9150614135826158be565b602982019050919050565b600061414d601283614c77565b91506141588261590d565b601282019050919050565b6000614170603583614c77565b915061417b82615936565b603582019050919050565b6000614193602083614c66565b915061419e82615985565b602082019050919050565b60006141b6606a83614c77565b91506141c1826159ae565b606a82019050919050565b60006141d9602983614c66565b91506141e482615a49565b604082019050919050565b60006141fc600a83614c66565b915061420782615a98565b602082019050919050565b600061421f600483614c77565b915061422a82615ac1565b600482019050919050565b6000614242603c83614c77565b915061424d82615aea565b603c82019050919050565b6000614265600383614c77565b915061427082615b39565b600382019050919050565b6000614288602183614c66565b915061429382615b62565b604082019050919050565b60006142ab602f83614c77565b91506142b682615bb1565b602f82019050919050565b60006142ce601d83614c77565b91506142d982615c00565b601d82019050919050565b60006142f1600083614c5b565b91506142fc82615c29565b600082019050919050565b6000614314603183614c66565b915061431f82615c2c565b604082019050919050565b6000614337604183614c77565b915061434282615c7b565b604182019050919050565b600061435a602c83614c66565b915061436582615cf0565b604082019050919050565b600061437d600d83614c77565b915061438882615d3f565b600d82019050919050565b60006143a0606b83614c77565b91506143ab82615d68565b606b82019050919050565b60006143c3601683614c77565b91506143ce82615e03565b601682019050919050565b60006143e6601a83614c77565b91506143f182615e2c565b601a82019050919050565b6000614409601f83614c77565b915061441482615e55565b601f82019050919050565b600061442c600683614c77565b915061443782615e7e565b600682019050919050565b600061444f601a83614c77565b915061445a82615ea7565b601a82019050919050565b61446e81614e80565b82525050565b61448561448082614e80565b614fdd565b82525050565b600061449682613d03565b91506144a2828b613c8c565b91506144ad82614140565b91506144b9828a613c8c565b91506144c48261429e565b91506144d08289613c8c565b91506144db82614163565b91506144e78288613c8c565b91506144f28261411d565b91506144fe8287613c8c565b9150614509826140fa565b91506145158286613c8c565b915061452082614370565b915061452c8285613c8c565b91506145378261406e565b915061454282614442565b915061454e8284613c8c565b915061455982614005565b91508190509998505050505050505050565b600061457682613f79565b9150614581826141a9565b915061458c82614393565b915061459782614212565b91506145a282613dd5565b91506145ad82613e1b565b91506145b98288613c8c565b91506145c482614235565b91506145d08287613c8c565b91506145db826143fc565b91506145e682614212565b91506145f182613f10565b91506145fc826140b4565b915061460782613f33565b91506146138286613c8c565b915061461e82614258565b915061462982613cbd565b91506146358285613c8c565b915061464082613d8f565b915061464b82613e61565b91506146578284613c8c565b915061466282613eca565b915061466d82614212565b91508190509695505050505050565b600061468782614028565b91506146938284613c8c565b915081905092915050565b60006146a9826142c1565b91506146b58284613c8c565b915081905092915050565b60006146cb826142e4565b9150819050919050565b60006146e08261432a565b91506146ec8284613c8c565b91506146f78261441f565b915081905092915050565b600061470d826143d9565b91506147198286613c8c565b9150614724826143b6565b91506147308285613c8c565b915061473b82613ce0565b91506147478284613c8c565b915061475282614091565b9150819050949350505050565b600061476b8287614474565b60208201915061477b8286613bce565b60148201915061478b8285613bce565b60148201915061479b8284614474565b60208201915081905095945050505050565b60006147b98287614474565b6020820191506147c98286613bf4565b6020820191506147d98285613bce565b6014820191506147e98284613bce565b60148201915081905095945050505050565b60006148078287614474565b6020820191506148178286614474565b6020820191506148278285613bce565b6014820191506148378284613bce565b60148201915081905095945050505050565b600060208201905061485e6000830184613bbf565b92915050565b60006020820190506148796000830184613bb0565b92915050565b60006080820190506148946000830187613bbf565b6148a16020830186613bbf565b6148ae6040830185614465565b81810360608301526148c08184613c1a565b905095945050505050565b60006020820190506148e06000830184613be5565b92915050565b60006020820190506148fb6000830184613c0b565b92915050565b6000602082019050818103600083015261491b8184613c53565b905092915050565b6000602082019050818103600083015261493c81613d26565b9050919050565b6000602082019050818103600083015261495c81613d49565b9050919050565b6000602082019050818103600083015261497c81613d6c565b9050919050565b6000602082019050818103600083015261499c81613db2565b9050919050565b600060208201905081810360008301526149bc81613df8565b9050919050565b600060208201905081810360008301526149dc81613e3e565b9050919050565b600060208201905081810360008301526149fc81613e84565b9050919050565b60006020820190508181036000830152614a1c81613ea7565b9050919050565b60006020820190508181036000830152614a3c81613eed565b9050919050565b60006020820190508181036000830152614a5c81613f56565b9050919050565b60006020820190508181036000830152614a7c81613f9c565b9050919050565b60006020820190508181036000830152614a9c81613fbf565b9050919050565b60006020820190508181036000830152614abc81613fe2565b9050919050565b60006020820190508181036000830152614adc8161404b565b9050919050565b60006020820190508181036000830152614afc816140d7565b9050919050565b60006020820190508181036000830152614b1c81614186565b9050919050565b60006020820190508181036000830152614b3c816141cc565b9050919050565b60006020820190508181036000830152614b5c816141ef565b9050919050565b60006020820190508181036000830152614b7c8161427b565b9050919050565b60006020820190508181036000830152614b9c81614307565b9050919050565b60006020820190508181036000830152614bbc8161434d565b9050919050565b6000602082019050614bd86000830184614465565b92915050565b6000614be8614bf9565b9050614bf48282614f35565b919050565b6000604051905090565b600067ffffffffffffffff821115614c1e57614c1d6150a5565b5b614c27826150d4565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614c8d82614e80565b9150614c9883614e80565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ccd57614ccc615018565b5b828201905092915050565b6000614ce382614e8a565b9150614cee83614e8a565b92508260ff03821115614d0457614d03615018565b5b828201905092915050565b6000614d1a82614e80565b9150614d2583614e80565b925082614d3557614d34615047565b5b828204905092915050565b6000614d4b82614e80565b9150614d5683614e80565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d8f57614d8e615018565b5b828202905092915050565b6000614da582614e80565b9150614db083614e80565b925082821015614dc357614dc2615018565b5b828203905092915050565b6000614dd982614e60565b9050919050565b6000614deb82614e60565b9050919050565b60008115159050919050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614ec4578082015181840152602081019050614ea9565b83811115614ed3576000848401525b50505050565b6000614ee482614e80565b91506000821415614ef857614ef7615018565b5b600182039050919050565b60006002820490506001821680614f1b57607f821691505b60208210811415614f2f57614f2e615076565b5b50919050565b614f3e826150d4565b810181811067ffffffffffffffff82111715614f5d57614f5c6150a5565b5b80604052505050565b6000614f7182614e80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614fa457614fa3615018565b5b600182019050919050565b6000614fba82614fcb565b9050919050565b6000819050919050565b6000614fd6826150e5565b9050919050565b6000819050919050565b6000614ff282614e80565b9150614ffd83614e80565b92508261500d5761500c615047565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f3c2f673e3c6720636c6173733d226d6f75746822207472616e73666f726d3d2260008201527f7472616e736c6174652800000000000000000000000000000000000000000000602082015250565b7f20616e64206d6f757468206c656e677468206f66200000000000000000000000600082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f636f756c64206e6f742073656e64000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f2c3029223e000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f3c672069643d2268656164223e00000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c656c6c697073652066696c6c3d222300000000000000000000000000000000600082015250565b7f444f4e45204d494e54494e470000000000000000000000000000000000000000600082015250565b7f3c7061746820643d224d20313330203234302051203132302032313020000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f2032333522207374726f6b653d22626c61636b22207374726f6b652d7769647460008201527f683d2233222066696c6c3d227472616e73706172656e74222f3e000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f3c672069643d2265796532223e00000000000000000000000000000000000000600082015250565b7f3c656c6c697073652072793d22332e35222072783d2233222069643d2273766760008201527f5f34222063793d223136392e35222063783d2232303822207374726f6b652d7760208201527f696474683d2235222066696c6c3d222330303030303022207374726f6b653d2260408201527f2300000000000000000000000000000000000000000000000000000000000000606082015250565b7f6e6f742065786973740000000000000000000000000000000000000000000000600082015250565b7f3c672069643d2265796531223e00000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4c6f6f6769652023000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f2121210000000000000000000000000000000000000000000000000000000000600082015250565b7f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323960008201527f2e35222072783d2232392e35222069643d227376675f32222063793d2231363860208201527f2e35222063783d223230392e3522207374726f6b653d2223303030222066696c60408201527f6c3d2223666666222f3e00000000000000000000000000000000000000000000606082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a20226d6f7574684c656e677468222c2060008201527f2276616c7565223a200000000000000000000000000000000000000000000000602082015250565b7f227d2c7b2274726169745f74797065223a20226368756262696e657373222c2060008201527f2276616c7565223a200000000000000000000000000000000000000000000000602082015250565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a60008201527f2022636f6c6f72222c202276616c7565223a2022230000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323960008201527f2e35222072783d2232392e35222069643d227376675f31222063793d2231353460208201527f2e35222063783d223138312e3522207374726f6b653d2223303030222066696c60408201527f6c3d2223666666222f3e00000000000000000000000000000000000000000000606082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4e4f5420454e4f55474800000000000000000000000000000000000000000000600082015250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000600082015250565b7f22207374726f6b652d77696474683d2233222063783d223230342e352220637960008201527f3d223231312e3830303635222069643d227376675f35222072783d2200000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f6275726e7960008201527f626f79732e636f6d2f746f6b656e2f0000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f3c7376672077696474683d2234303022206865696768743d223430302220786d60008201527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672260208201527f3e00000000000000000000000000000000000000000000000000000000000000604082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f7d5d2c20226f776e6572223a2200000000000000000000000000000000000000600082015250565b7f3c656c6c697073652072793d22332e35222072783d22322e35222069643d227360008201527f76675f33222063793d223135342e35222063783d223137332e3522207374726f60208201527f6b652d77696474683d223522207374726f6b653d2223303030222066696c6c3d60408201527f2223303030303030222f3e000000000000000000000000000000000000000000606082015250565b7f20776974682061206368756262696e657373206f662000000000000000000000600082015250565b7f54686973204c6f6f6769652069732074686520636f6c6f722023000000000000600082015250565b7f222072793d2235312e383030363522207374726f6b653d2223303030222f3e00600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b615ed981614dce565b8114615ee457600080fd5b50565b615ef081614df2565b8114615efb57600080fd5b50565b615f0781614e34565b8114615f1257600080fd5b50565b615f1e81614e80565b8114615f2957600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201f29bf257faa4d72f616975f64de3eb3bcf25fcb875802c0402b3442e54668a964736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80637165485d116100f7578063a4d66daf11610095578063e985e9c511610064578063e985e9c5146106a2578063eb93406b146106df578063f2fde38b146106fd578063faa204e114610726576101c2565b8063a4d66daf146105d4578063b88d4fde146105ff578063c87b56dd14610628578063d4e28c9c14610665576101c2565b8063969e4b8d116100d1578063969e4b8d14610506578063a035b1fe14610543578063a22cb4651461056e578063a2d6c6da14610597576101c2565b80637165485d146104855780638da5cb5b146104b057806395d89b41146104db576101c2565b80633f4f8561116101645780636352211e1161013e5780636352211e146103c957806366d003ac1461040657806370a0823114610431578063715018a61461046e576101c2565b80633f4f85611461032657806342842e0e146103635780634f6ccce71461038c576101c2565b8063095ea7b3116101a0578063095ea7b31461026c57806318160ddd1461029557806323b872dd146102c05780632f745c59146102e9576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613b35565b610763565b6040516101fb91906148cb565b60405180910390f35b34801561021057600080fd5b506102196107dd565b6040516102269190614901565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190613b87565b61086f565b6040516102639190614849565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190613af9565b6108f4565b005b3480156102a157600080fd5b506102aa610a0c565b6040516102b79190614bc3565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e291906139f3565b610a19565b005b3480156102f557600080fd5b50610310600480360381019061030b9190613af9565b610a79565b60405161031d9190614bc3565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190613b87565b610b1e565b60405161035a9190614bc3565b60405180910390f35b34801561036f57600080fd5b5061038a600480360381019061038591906139f3565b610b36565b005b34801561039857600080fd5b506103b360048036038101906103ae9190613b87565b610b56565b6040516103c09190614bc3565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb9190613b87565b610bed565b6040516103fd9190614849565b60405180910390f35b34801561041257600080fd5b5061041b610c9f565b6040516104289190614864565b60405180910390f35b34801561043d57600080fd5b506104586004803603810190610453919061398e565b610cb7565b6040516104659190614bc3565b60405180910390f35b34801561047a57600080fd5b50610483610d6f565b005b34801561049157600080fd5b5061049a610df7565b6040516104a79190614bc3565b60405180910390f35b3480156104bc57600080fd5b506104c5610dfd565b6040516104d29190614849565b60405180910390f35b3480156104e757600080fd5b506104f0610e27565b6040516104fd9190614901565b60405180910390f35b34801561051257600080fd5b5061052d60048036038101906105289190613b87565b610eb9565b60405161053a91906148e6565b60405180910390f35b34801561054f57600080fd5b50610558610ed9565b6040516105659190614bc3565b60405180910390f35b34801561057a57600080fd5b5061059560048036038101906105909190613abd565b610edf565b005b3480156105a357600080fd5b506105be60048036038101906105b99190613b87565b611060565b6040516105cb9190614901565b60405180910390f35b3480156105e057600080fd5b506105e961119d565b6040516105f69190614bc3565b60405180910390f35b34801561060b57600080fd5b5061062660048036038101906106219190613a42565b6111a3565b005b34801561063457600080fd5b5061064f600480360381019061064a9190613b87565b611205565b60405161065c9190614901565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613b87565b61144c565b60405161069991906148e6565b60405180910390f35b3480156106ae57600080fd5b506106c960048036038101906106c491906139b7565b61146c565b6040516106d691906148cb565b60405180910390f35b6106e7611500565b6040516106f49190614bc3565b60405180910390f35b34801561070957600080fd5b50610724600480360381019061071f919061398e565b611ba0565b005b34801561073257600080fd5b5061074d60048036038101906107489190613b87565b611c98565b60405161075a9190614bc3565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107d657506107d582611cb0565b5b9050919050565b6060600080546107ec90614f03565b80601f016020809104026020016040519081016040528092919081815260200182805461081890614f03565b80156108655780601f1061083a57610100808354040283529160200191610865565b820191906000526020600020905b81548152906001019060200180831161084857829003601f168201915b5050505050905090565b600061087a82611d92565b6108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090614ae3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ff82610bed565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790614b63565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661098f611dfe565b73ffffffffffffffffffffffffffffffffffffffff1614806109be57506109bd816109b8611dfe565b61146c565b5b6109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490614a63565b60405180910390fd5b610a078383611e06565b505050565b6000600880549050905090565b610a2a610a24611dfe565b82611ebf565b610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090614b83565b60405180910390fd5b610a74838383611f9d565b505050565b6000610a8483610cb7565b8210610ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abc90614923565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60106020528060005260406000206000915090505481565b610b51838383604051806020016040528060008152506111a3565b505050565b6000610b60610a0c565b8210610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614ba3565b60405180910390fd5b60088281548110610bdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90614aa3565b60405180910390fd5b80915050919050565b73a81a6a910fed20374361b35c451a4a44f86ced4681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90614a83565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d77611dfe565b73ffffffffffffffffffffffffffffffffffffffff16610d95610dfd565b73ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290614b03565b60405180910390fd5b610df56000612198565b565b6103ea81565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e3690614f03565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6290614f03565b8015610eaf5780601f10610e8457610100808354040283529160200191610eaf565b820191906000526020600020905b815481529060010190602001808311610e9257829003601f168201915b5050505050905090565b600e6020528060005260406000206000915054906101000a900460e81b81565b600c5481565b610ee7611dfe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614a03565b60405180910390fd5b8060056000610f62611dfe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661100f611dfe565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161105491906148cb565b60405180910390a35050565b606060006110ad600d600085815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6110c9600f60008681526020019081526020016000205461255f565b611112600e600087815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b611153600b600f60008981526020019081526020016000205460096111379190614d40565b61032a6111449190614d9a565b61114e9190614d0f565b61255f565b61116f601060008981526020019081526020016000205461255f565b60405160200161118395949392919061456b565b604051602081830303815290604052905080915050919050565b610e9081565b6111b46111ae611dfe565b83611ebf565b6111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90614b83565b60405180910390fd5b6111ff8484848461270c565b50505050565b606061121082611d92565b61124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124690614a43565b60405180910390fd5b600061125a8361255f565b60405160200161126a919061467c565b604051602081830303815290604052905060006112c6600d600086815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6112e2600f600087815260200190815260200160002054612768565b6112fe6010600088815260200190815260200160002054612768565b60405160200161131093929190614702565b6040516020818303038152906040529050600061133461132f8661293d565b612974565b905061142383836113448861255f565b61138d600d60008b815260200190815260200160002060009054906101000a900460e81b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661225e565b6113a9600f60008c815260200190815260200160002054612768565b6113c5601060008d815260200190815260200160002054612768565b6113f760146113d38e610bed565b73ffffffffffffffffffffffffffffffffffffffff16612b1390919063ffffffff16565b8860405160200161140f98979695949392919061448b565b604051602081830303815290604052612974565b604051602001611433919061469e565b6040516020818303038152906040529350505050919050565b600d6020528060005260406000206000915054906101000a900460e81b81565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610e9061150f600b612dca565b1061154f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611546906149c3565b60405180910390fd5b600c54341015611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90614b43565b60405180910390fd5b6103e86103ea600c546115a79190614d40565b6115b19190614d0f565b600c819055506115c1600b612dd8565b60006115cd600b612dca565b90506115d93382612dee565b6000816001436115e99190614d9a565b4033306040516020016115ff94939291906147ad565b604051602081830303815290604052805190602001209050601081600260208110611653577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008826001602081106116d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8260006020811061175a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600d600084815260200190815260200160002060006101000a81548162ffffff021916908360e81c02179055506000423330856040516020016117e9949392919061475f565b60405160208183030381529060405280519060200120905060108160026020811061183d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c6008826001602081106118c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c82600360208110611944577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600e600085815260200190815260200160002060006101000a81548162ffffff021916908360e81c021790555060ff826003602081106119f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c60ff166037611a0c9190614d40565b611a169190614d0f565b6023611a229190614c82565b600f60008581526020019081526020016000208190555060ff82600460208110611a75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c60ff166004600f600087815260200190815260200160002054611a9f9190614d0f565b611aa99190614d40565b611ab39190614d0f565b60b4611abf9190614c82565b6010600085815260200190815260200160002081905550600073a81a6a910fed20374361b35c451a4a44f86ced4673ffffffffffffffffffffffffffffffffffffffff1634604051611b10906146c0565b60006040518083038185875af1925050503d8060008114611b4d576040519150601f19603f3d011682016040523d82523d6000602084013e611b52565b606091505b5050905080611b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8d90614943565b60405180910390fd5b8394505050505090565b611ba8611dfe565b73ffffffffffffffffffffffffffffffffffffffff16611bc6610dfd565b73ffffffffffffffffffffffffffffffffffffffff1614611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390614b03565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390614983565b60405180910390fd5b611c9581612198565b50565b600f6020528060005260406000206000915090505481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611d7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611d8b5750611d8a82612fbc565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e7983610bed565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611eca82611d92565b611f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0090614a23565b60405180910390fd5b6000611f1483610bed565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f8357508373ffffffffffffffffffffffffffffffffffffffff16611f6b8461086f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f945750611f93818561146c565b5b91505092915050565b600081428486604051602001611fb694939291906147fb565b60405160208183030381529060405280519060200120905060108160026020811061200a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60088260016020811061208e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c82600060208110612111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191617600e600084815260200190815260200160002060006101000a81548162ffffff021916908360e81c0217905550612192848484613026565b50505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606000600667ffffffffffffffff8111156122a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122d55781602001600182028036833780820191505090505b50905060005b6003811015612555577f3031323334353637383961626364656600000000000000000000000000000000600f858360038110612340577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c1660ff1660108110612382577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8260016002846123969190614d40565b6123a09190614c82565b815181106123d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656600000000000000000000000000000000600f6004868460038110612464577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c1660ff16601081106124ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b826002836124dc9190614d40565b81518110612513577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061254d90614f66565b9150506122db565b5080915050919050565b606060008214156125a7576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612707565b600082905060005b600082146125d95780806125c290614f66565b915050600a826125d29190614d0f565b91506125af565b60008167ffffffffffffffff81111561261b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561264d5781602001600182028036833780820191505090505b5090505b60008514612700576001826126669190614d9a565b9150600a856126759190614fe7565b60306126819190614c82565b60f81b8183815181106126bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856126f99190614d0f565b9450612651565b8093505050505b919050565b612717848484611f9d565b61272384848484613282565b612762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275990614963565b60405180910390fd5b50505050565b606060008214156127b0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612938565b600082905060005b600082146127e25780806127cb90614f66565b915050600a826127db9190614d0f565b91506127b8565b60008167ffffffffffffffff811115612824577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128565781602001600182028036833780820191505090505b50905060008290505b60008614612930576001816128749190614d9a565b90506000600a80886128869190614d0f565b6128909190614d40565b8761289b9190614d9a565b60306128a79190614cd8565b905060008160f81b9050808484815181106128eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886129279190614d0f565b9750505061285f565b819450505050505b919050565b6060600061294a83611060565b60405160200161295a91906146d5565b604051602081830303815290604052905080915050919050565b606060008251141561299757604051806020016040528060008152509050612b0e565b6000604051806060016040528060408152602001615f2d60409139905060006003600285516129c69190614c82565b6129d09190614d0f565b60046129dc9190614d40565b905060006020826129ed9190614c82565b67ffffffffffffffff811115612a2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a5e5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612acd576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612a72565b600389510660018114612ae75760028114612af757612b02565b613d3d60f01b6002830352612b02565b603d60f81b60018303525b50505050508093505050505b919050565b606060006002836002612b269190614d40565b612b309190614c82565b67ffffffffffffffff811115612b6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ba15781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612bff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612cc99190614d40565b612cd39190614c82565b90505b6001811115612dbf577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612d78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612db890614ed9565b9050612cd6565b508091505092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5590614ac3565b60405180910390fd5b612e6781611d92565b15612ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9e906149a3565b60405180910390fd5b612eb360008383613419565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f039190614c82565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8273ffffffffffffffffffffffffffffffffffffffff1661304682610bed565b73ffffffffffffffffffffffffffffffffffffffff161461309c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309390614b23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561310c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613103906149e3565b60405180910390fd5b613117838383613419565b613122600082611e06565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131729190614d9a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131c99190614c82565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006132a38473ffffffffffffffffffffffffffffffffffffffff1661352d565b1561340c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026132cc611dfe565b8786866040518563ffffffff1660e01b81526004016132ee949392919061487f565b602060405180830381600087803b15801561330857600080fd5b505af192505050801561333957506040513d601f19601f820116820180604052508101906133369190613b5e565b60015b6133bc573d8060008114613369576040519150601f19603f3d011682016040523d82523d6000602084013e61336e565b606091505b506000815114156133b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ab90614963565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613411565b600190505b949350505050565b613424838383613540565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156134675761346281613545565b6134a6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146134a5576134a4838261358e565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156134e9576134e4816136fb565b613528565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461352757613526828261383e565b5b5b505050565b600080823b905060008111915050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161359b84610cb7565b6135a59190614d9a565b905060006007600084815260200190815260200160002054905081811461368a576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061370f9190614d9a565b9050600060096000848152602001908152602001600020549050600060088381548110613765577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106137ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061384983610cb7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60006138d06138cb84614c03565b614bde565b9050828152602081018484840111156138e857600080fd5b6138f3848285614e97565b509392505050565b60008135905061390a81615ed0565b92915050565b60008135905061391f81615ee7565b92915050565b60008135905061393481615efe565b92915050565b60008151905061394981615efe565b92915050565b600082601f83011261396057600080fd5b81356139708482602086016138bd565b91505092915050565b60008135905061398881615f15565b92915050565b6000602082840312156139a057600080fd5b60006139ae848285016138fb565b91505092915050565b600080604083850312156139ca57600080fd5b60006139d8858286016138fb565b92505060206139e9858286016138fb565b9150509250929050565b600080600060608486031215613a0857600080fd5b6000613a16868287016138fb565b9350506020613a27868287016138fb565b9250506040613a3886828701613979565b9150509250925092565b60008060008060808587031215613a5857600080fd5b6000613a66878288016138fb565b9450506020613a77878288016138fb565b9350506040613a8887828801613979565b925050606085013567ffffffffffffffff811115613aa557600080fd5b613ab18782880161394f565b91505092959194509250565b60008060408385031215613ad057600080fd5b6000613ade858286016138fb565b9250506020613aef85828601613910565b9150509250929050565b60008060408385031215613b0c57600080fd5b6000613b1a858286016138fb565b9250506020613b2b85828601613979565b9150509250929050565b600060208284031215613b4757600080fd5b6000613b5584828501613925565b91505092915050565b600060208284031215613b7057600080fd5b6000613b7e8482850161393a565b91505092915050565b600060208284031215613b9957600080fd5b6000613ba784828501613979565b91505092915050565b613bb981614de0565b82525050565b613bc881614dce565b82525050565b613bdf613bda82614dce565b614faf565b82525050565b613bee81614df2565b82525050565b613c05613c0082614e2a565b614fc1565b82525050565b613c1481614dfe565b82525050565b6000613c2582614c34565b613c2f8185614c4a565b9350613c3f818560208601614ea6565b613c48816150d4565b840191505092915050565b6000613c5e82614c3f565b613c688185614c66565b9350613c78818560208601614ea6565b613c81816150d4565b840191505092915050565b6000613c9782614c3f565b613ca18185614c77565b9350613cb1818560208601614ea6565b80840191505092915050565b6000613cca602a83614c77565b9150613cd5826150f2565b602a82019050919050565b6000613ced601583614c77565b9150613cf882615141565b601582019050919050565b6000613d10600983614c77565b9150613d1b8261516a565b600982019050919050565b6000613d33602b83614c66565b9150613d3e82615193565b604082019050919050565b6000613d56600e83614c66565b9150613d61826151e2565b602082019050919050565b6000613d79603283614c66565b9150613d848261520b565b604082019050919050565b6000613d9c600583614c77565b9150613da78261525a565b600582019050919050565b6000613dbf602683614c66565b9150613dca82615283565b604082019050919050565b6000613de2600d83614c77565b9150613ded826152d2565b600d82019050919050565b6000613e05601c83614c66565b9150613e10826152fb565b602082019050919050565b6000613e28601083614c77565b9150613e3382615324565b601082019050919050565b6000613e4b600c83614c66565b9150613e568261534d565b602082019050919050565b6000613e6e601d83614c77565b9150613e7982615376565b601d82019050919050565b6000613e91602483614c66565b9150613e9c8261539f565b604082019050919050565b6000613eb4601983614c66565b9150613ebf826153ee565b602082019050919050565b6000613ed7603a83614c77565b9150613ee282615417565b603a82019050919050565b6000613efa602c83614c66565b9150613f0582615466565b604082019050919050565b6000613f1d600d83614c77565b9150613f28826154b5565b600d82019050919050565b6000613f40606183614c77565b9150613f4b826154de565b606182019050919050565b6000613f63600983614c66565b9150613f6e82615579565b602082019050919050565b6000613f86600d83614c77565b9150613f91826155a2565b600d82019050919050565b6000613fa9603883614c66565b9150613fb4826155cb565b604082019050919050565b6000613fcc602a83614c66565b9150613fd78261561a565b604082019050919050565b6000613fef602983614c66565b9150613ffa82615669565b604082019050919050565b6000614012600283614c77565b915061401d826156b8565b600282019050919050565b6000614035600883614c77565b9150614040826156e1565b600882019050919050565b6000614058602083614c66565b91506140638261570a565b602082019050919050565b600061407b600d83614c77565b915061408682615733565b600d82019050919050565b600061409e600383614c77565b91506140a98261575c565b600382019050919050565b60006140c1606a83614c77565b91506140cc82615785565b606a82019050919050565b60006140e4602c83614c66565b91506140ef82615820565b604082019050919050565b6000614107602983614c77565b91506141128261586f565b602982019050919050565b600061412a602983614c77565b9150614135826158be565b602982019050919050565b600061414d601283614c77565b91506141588261590d565b601282019050919050565b6000614170603583614c77565b915061417b82615936565b603582019050919050565b6000614193602083614c66565b915061419e82615985565b602082019050919050565b60006141b6606a83614c77565b91506141c1826159ae565b606a82019050919050565b60006141d9602983614c66565b91506141e482615a49565b604082019050919050565b60006141fc600a83614c66565b915061420782615a98565b602082019050919050565b600061421f600483614c77565b915061422a82615ac1565b600482019050919050565b6000614242603c83614c77565b915061424d82615aea565b603c82019050919050565b6000614265600383614c77565b915061427082615b39565b600382019050919050565b6000614288602183614c66565b915061429382615b62565b604082019050919050565b60006142ab602f83614c77565b91506142b682615bb1565b602f82019050919050565b60006142ce601d83614c77565b91506142d982615c00565b601d82019050919050565b60006142f1600083614c5b565b91506142fc82615c29565b600082019050919050565b6000614314603183614c66565b915061431f82615c2c565b604082019050919050565b6000614337604183614c77565b915061434282615c7b565b604182019050919050565b600061435a602c83614c66565b915061436582615cf0565b604082019050919050565b600061437d600d83614c77565b915061438882615d3f565b600d82019050919050565b60006143a0606b83614c77565b91506143ab82615d68565b606b82019050919050565b60006143c3601683614c77565b91506143ce82615e03565b601682019050919050565b60006143e6601a83614c77565b91506143f182615e2c565b601a82019050919050565b6000614409601f83614c77565b915061441482615e55565b601f82019050919050565b600061442c600683614c77565b915061443782615e7e565b600682019050919050565b600061444f601a83614c77565b915061445a82615ea7565b601a82019050919050565b61446e81614e80565b82525050565b61448561448082614e80565b614fdd565b82525050565b600061449682613d03565b91506144a2828b613c8c565b91506144ad82614140565b91506144b9828a613c8c565b91506144c48261429e565b91506144d08289613c8c565b91506144db82614163565b91506144e78288613c8c565b91506144f28261411d565b91506144fe8287613c8c565b9150614509826140fa565b91506145158286613c8c565b915061452082614370565b915061452c8285613c8c565b91506145378261406e565b915061454282614442565b915061454e8284613c8c565b915061455982614005565b91508190509998505050505050505050565b600061457682613f79565b9150614581826141a9565b915061458c82614393565b915061459782614212565b91506145a282613dd5565b91506145ad82613e1b565b91506145b98288613c8c565b91506145c482614235565b91506145d08287613c8c565b91506145db826143fc565b91506145e682614212565b91506145f182613f10565b91506145fc826140b4565b915061460782613f33565b91506146138286613c8c565b915061461e82614258565b915061462982613cbd565b91506146358285613c8c565b915061464082613d8f565b915061464b82613e61565b91506146578284613c8c565b915061466282613eca565b915061466d82614212565b91508190509695505050505050565b600061468782614028565b91506146938284613c8c565b915081905092915050565b60006146a9826142c1565b91506146b58284613c8c565b915081905092915050565b60006146cb826142e4565b9150819050919050565b60006146e08261432a565b91506146ec8284613c8c565b91506146f78261441f565b915081905092915050565b600061470d826143d9565b91506147198286613c8c565b9150614724826143b6565b91506147308285613c8c565b915061473b82613ce0565b91506147478284613c8c565b915061475282614091565b9150819050949350505050565b600061476b8287614474565b60208201915061477b8286613bce565b60148201915061478b8285613bce565b60148201915061479b8284614474565b60208201915081905095945050505050565b60006147b98287614474565b6020820191506147c98286613bf4565b6020820191506147d98285613bce565b6014820191506147e98284613bce565b60148201915081905095945050505050565b60006148078287614474565b6020820191506148178286614474565b6020820191506148278285613bce565b6014820191506148378284613bce565b60148201915081905095945050505050565b600060208201905061485e6000830184613bbf565b92915050565b60006020820190506148796000830184613bb0565b92915050565b60006080820190506148946000830187613bbf565b6148a16020830186613bbf565b6148ae6040830185614465565b81810360608301526148c08184613c1a565b905095945050505050565b60006020820190506148e06000830184613be5565b92915050565b60006020820190506148fb6000830184613c0b565b92915050565b6000602082019050818103600083015261491b8184613c53565b905092915050565b6000602082019050818103600083015261493c81613d26565b9050919050565b6000602082019050818103600083015261495c81613d49565b9050919050565b6000602082019050818103600083015261497c81613d6c565b9050919050565b6000602082019050818103600083015261499c81613db2565b9050919050565b600060208201905081810360008301526149bc81613df8565b9050919050565b600060208201905081810360008301526149dc81613e3e565b9050919050565b600060208201905081810360008301526149fc81613e84565b9050919050565b60006020820190508181036000830152614a1c81613ea7565b9050919050565b60006020820190508181036000830152614a3c81613eed565b9050919050565b60006020820190508181036000830152614a5c81613f56565b9050919050565b60006020820190508181036000830152614a7c81613f9c565b9050919050565b60006020820190508181036000830152614a9c81613fbf565b9050919050565b60006020820190508181036000830152614abc81613fe2565b9050919050565b60006020820190508181036000830152614adc8161404b565b9050919050565b60006020820190508181036000830152614afc816140d7565b9050919050565b60006020820190508181036000830152614b1c81614186565b9050919050565b60006020820190508181036000830152614b3c816141cc565b9050919050565b60006020820190508181036000830152614b5c816141ef565b9050919050565b60006020820190508181036000830152614b7c8161427b565b9050919050565b60006020820190508181036000830152614b9c81614307565b9050919050565b60006020820190508181036000830152614bbc8161434d565b9050919050565b6000602082019050614bd86000830184614465565b92915050565b6000614be8614bf9565b9050614bf48282614f35565b919050565b6000604051905090565b600067ffffffffffffffff821115614c1e57614c1d6150a5565b5b614c27826150d4565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614c8d82614e80565b9150614c9883614e80565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ccd57614ccc615018565b5b828201905092915050565b6000614ce382614e8a565b9150614cee83614e8a565b92508260ff03821115614d0457614d03615018565b5b828201905092915050565b6000614d1a82614e80565b9150614d2583614e80565b925082614d3557614d34615047565b5b828204905092915050565b6000614d4b82614e80565b9150614d5683614e80565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d8f57614d8e615018565b5b828202905092915050565b6000614da582614e80565b9150614db083614e80565b925082821015614dc357614dc2615018565b5b828203905092915050565b6000614dd982614e60565b9050919050565b6000614deb82614e60565b9050919050565b60008115159050919050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614ec4578082015181840152602081019050614ea9565b83811115614ed3576000848401525b50505050565b6000614ee482614e80565b91506000821415614ef857614ef7615018565b5b600182039050919050565b60006002820490506001821680614f1b57607f821691505b60208210811415614f2f57614f2e615076565b5b50919050565b614f3e826150d4565b810181811067ffffffffffffffff82111715614f5d57614f5c6150a5565b5b80604052505050565b6000614f7182614e80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614fa457614fa3615018565b5b600182019050919050565b6000614fba82614fcb565b9050919050565b6000819050919050565b6000614fd6826150e5565b9050919050565b6000819050919050565b6000614ff282614e80565b9150614ffd83614e80565b92508261500d5761500c615047565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f3c2f673e3c6720636c6173733d226d6f75746822207472616e73666f726d3d2260008201527f7472616e736c6174652800000000000000000000000000000000000000000000602082015250565b7f20616e64206d6f757468206c656e677468206f66200000000000000000000000600082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f636f756c64206e6f742073656e64000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f2c3029223e000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f3c672069643d2268656164223e00000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c656c6c697073652066696c6c3d222300000000000000000000000000000000600082015250565b7f444f4e45204d494e54494e470000000000000000000000000000000000000000600082015250565b7f3c7061746820643d224d20313330203234302051203132302032313020000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f2032333522207374726f6b653d22626c61636b22207374726f6b652d7769647460008201527f683d2233222066696c6c3d227472616e73706172656e74222f3e000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f3c672069643d2265796532223e00000000000000000000000000000000000000600082015250565b7f3c656c6c697073652072793d22332e35222072783d2233222069643d2273766760008201527f5f34222063793d223136392e35222063783d2232303822207374726f6b652d7760208201527f696474683d2235222066696c6c3d222330303030303022207374726f6b653d2260408201527f2300000000000000000000000000000000000000000000000000000000000000606082015250565b7f6e6f742065786973740000000000000000000000000000000000000000000000600082015250565b7f3c672069643d2265796531223e00000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4c6f6f6769652023000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f2121210000000000000000000000000000000000000000000000000000000000600082015250565b7f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323960008201527f2e35222072783d2232392e35222069643d227376675f32222063793d2231363860208201527f2e35222063783d223230392e3522207374726f6b653d2223303030222066696c60408201527f6c3d2223666666222f3e00000000000000000000000000000000000000000000606082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a20226d6f7574684c656e677468222c2060008201527f2276616c7565223a200000000000000000000000000000000000000000000000602082015250565b7f227d2c7b2274726169745f74797065223a20226368756262696e657373222c2060008201527f2276616c7565223a200000000000000000000000000000000000000000000000602082015250565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a60008201527f2022636f6c6f72222c202276616c7565223a2022230000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323960008201527f2e35222072783d2232392e35222069643d227376675f31222063793d2231353460208201527f2e35222063783d223138312e3522207374726f6b653d2223303030222066696c60408201527f6c3d2223666666222f3e00000000000000000000000000000000000000000000606082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4e4f5420454e4f55474800000000000000000000000000000000000000000000600082015250565b7f3c2f673e00000000000000000000000000000000000000000000000000000000600082015250565b7f22207374726f6b652d77696474683d2233222063783d223230342e352220637960008201527f3d223231312e3830303635222069643d227376675f35222072783d2200000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f6275726e7960008201527f626f79732e636f6d2f746f6b656e2f0000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f3c7376672077696474683d2234303022206865696768743d223430302220786d60008201527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672260208201527f3e00000000000000000000000000000000000000000000000000000000000000604082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f7d5d2c20226f776e6572223a2200000000000000000000000000000000000000600082015250565b7f3c656c6c697073652072793d22332e35222072783d22322e35222069643d227360008201527f76675f33222063793d223135342e35222063783d223137332e3522207374726f60208201527f6b652d77696474683d223522207374726f6b653d2223303030222066696c6c3d60408201527f2223303030303030222f3e000000000000000000000000000000000000000000606082015250565b7f20776974682061206368756262696e657373206f662000000000000000000000600082015250565b7f54686973204c6f6f6769652069732074686520636f6c6f722023000000000000600082015250565b7f222072793d2235312e383030363522207374726f6b653d2223303030222f3e00600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b615ed981614dce565b8114615ee457600080fd5b50565b615ef081614df2565b8114615efb57600080fd5b50565b615f0781614e34565b8114615f1257600080fd5b50565b615f1e81614e80565b8114615f2957600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201f29bf257faa4d72f616975f64de3eb3bcf25fcb875802c0402b3442e54668a964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2374,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)1774_storage"
      },
      {
        "astId": 2389,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "price",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2393,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "color",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bytes3)"
      },
      {
        "astId": 2397,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "eyeColor",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_bytes3)"
      },
      {
        "astId": 2401,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "chubbiness",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2405,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "mouthLength",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes3": {
        "encoding": "inplace",
        "label": "bytes3",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes3)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes3)",
        "numberOfBytes": "32",
        "value": "t_bytes3"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1774_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1773,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}